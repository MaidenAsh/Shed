<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Snake Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #gameCanvas {
            border: 2px solid #000;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const gridSize = 20;
        const tileCount = canvas.width / gridSize;

        let snake, food, dx, dy, score, gameRunning;

        function initGame() {
            snake = [
                {x: 10, y: 10},
            ];
            food = {x: 15, y: 15};
            dx = 0;
            dy = 0;
            score = 0;
            gameRunning = true;
        }

        initGame();

        document.addEventListener('keydown', handleKeyPress);

        function handleKeyPress(event) {
            const LEFT_KEY = 37;
            const RIGHT_KEY = 39;
            const UP_KEY = 38;
            const DOWN_KEY = 40;
            const SPACE_KEY = 32;

            const keyPressed = event.keyCode;

            if (keyPressed === SPACE_KEY && !gameRunning) {
                initGame();
                return;
            }

            if (!gameRunning) return;

            const goingUp = dy === -1;
            const goingDown = dy === 1;
            const goingRight = dx === 1;
            const goingLeft = dx === -1;

            if (keyPressed === LEFT_KEY && !goingRight) {
                dx = -1;
                dy = 0;
            }
            if (keyPressed === UP_KEY && !goingDown) {
                dx = 0;
                dy = -1;
            }
            if (keyPressed === RIGHT_KEY && !goingLeft) {
                dx = 1;
                dy = 0;
            }
            if (keyPressed === DOWN_KEY && !goingUp) {
                dx = 0;
                dy = 1;
            }
        }

        function drawGame() {
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            if (!gameRunning) {
                ctx.fillStyle = 'black';
                ctx.font = '30px Arial';
                ctx.fillText('Game Over!', canvas.width / 3.5, canvas.height / 2 - 30);
                ctx.font = '20px Arial';
                ctx.fillText('Press Space to Restart', canvas.width / 3.5, canvas.height / 2 + 20);
                ctx.fillText('Final Score: ' + score, canvas.width / 3.5, canvas.height / 2 + 50);
                return;
            }

            moveSnake();

            ctx.fillStyle = 'green';
            for (let i = 0; i < snake.length; i++) {
                ctx.fillRect(snake[i].x * gridSize, snake[i].y * gridSize, gridSize -2 , gridSize -2 );
            }

            ctx.fillStyle = 'red';
            ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize - 2, gridSize - 2);

            ctx.fillStyle = 'black';
            ctx.font = '20px Arial';
            ctx.fillText('Score: ' + score, 10, 25);
        }

        function moveSnake() {
            const head = {x: snake[0].x + dx, y: snake[0].y + dy};
            snake.unshift(head);

            if (head.x === food.x && head.y === food.y) {
                score++;
                generateFood();
            } else {
                snake.pop();
            }

            if (gameOver()) {
                gameRunning = false;
            }
        }

        function generateFood() {
            food.x = Math.floor(Math.random() * tileCount);
            food.y = Math.floor(Math.random() * tileCount);
        }

        function gameOver() {
            for (let i = 4; i < snake.length; i++) {
                if (snake[i].x === snake[0].x && snake[i].y === snake[0].y) return true;
            }
            const hitLeftWall = snake[0].x < 0;
            const hitRightWall = snake[0].x > tileCount - 1;
            const hitTopWall = snake[0].y < 0;
            const hitBottomWall = snake[0].y > tileCount - 1;
            return hitLeftWall || hitRightWall || hitTopWall || hitBottomWall;
        }

        function gameLoop() {
            drawGame();
            setTimeout(gameLoop, 100); // Increased from 100 to 150 to slow down the snake
        }

        gameLoop();
    </script>
</body>
</html>