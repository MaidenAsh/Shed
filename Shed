<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shed</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-image: url(images/bg2.jpg);
        }
        #shedCanvas {
            border: 3px solid black;
            border-radius: 15px;
            background-image: url(images/bg.jpg);
            background-size: 800px 800px;
        }
    </style>
</head>
<body onload="initGame()">
    <canvas id="shedCanvas" width="800" height="800"></canvas>
    <!--Every card image is inside this div-->
    <div style="display:none;">
        <img id="spades2" src="images/spades2.png";/>
        <img id="spades3" src="images/spades3.png";/>
        <img id="spades4" src="images/spades4.png";/>
        <img id="spades5" src="images/spades5.png";/>
        <img id="spades6" src="images/spades6.png";/>
        <img id="spades7" src="images/spades7.png";/>
        <img id="spades8" src="images/spades8.png";/>
        <img id="spades9" src="images/spades9.png";/>
        <img id="spades10" src="images/spades10.png";/>
        <img id="spadesJ" src="images/spadesJ.png";/>
        <img id="spadesQ" src="images/spadesQ.png";/>
        <img id="spadesK" src="images/spadesK.png";/>
        <img id="spadesA" src="images/spadesA.png";/>
        
        <img id="clubs2" src="images/clubs2.png";/>
        <img id="clubs3" src="images/clubs3.png";/>
        <img id="clubs4" src="images/clubs4.png";/>
        <img id="clubs5" src="images/clubs5.png";/>
        <img id="clubs6" src="images/clubs6.png";/>
        <img id="clubs7" src="images/clubs7.png";/>
        <img id="clubs8" src="images/clubs8.png";/>
        <img id="clubs9" src="images/clubs9.png";/>
        <img id="clubs10" src="images/clubs10.png";/>
        <img id="clubsJ" src="images/clubsJ.png";/>
        <img id="clubsQ" src="images/clubsQ.png";/>
        <img id="clubsK" src="images/clubsK.png";/>
        <img id="clubsA" src="images/clubsA.png";/>

        <img id="diamonds2" src="images/diamonds2.png";/>
        <img id="diamonds3" src="images/diamonds3.png";/>
        <img id="diamonds4" src="images/diamonds4.png";/>
        <img id="diamonds5" src="images/diamonds5.png";/>
        <img id="diamonds6" src="images/diamonds6.png";/>
        <img id="diamonds7" src="images/diamonds7.png";/>
        <img id="diamonds8" src="images/diamonds8.png";/>
        <img id="diamonds9" src="images/diamonds9.png";/>
        <img id="diamonds10" src="images/diamonds10.png";/>
        <img id="diamondsJ" src="images/diamondsJ.png";/>
        <img id="diamondsQ" src="images/diamondsQ.png";/>
        <img id="diamondsK" src="images/diamondsK.png";/>
        <img id="diamondsA" src="images/diamondsA.png";/>

        <img id="hearts2" src="images/hearts2.png";/>
        <img id="hearts3" src="images/hearts3.png";/>
        <img id="hearts4" src="images/hearts4.png";/>
        <img id="hearts5" src="images/hearts5.png";/>
        <img id="hearts6" src="images/hearts6.png";/>
        <img id="hearts7" src="images/hearts7.png";/>
        <img id="hearts8" src="images/hearts8.png";/>
        <img id="hearts9" src="images/hearts9.png";/>
        <img id="hearts10" src="images/hearts10.png";/>
        <img id="heartsJ" src="images/heartsJ.png";/>
        <img id="heartsQ" src="images/heartsQ.png";/>
        <img id="heartsK" src="images/heartsK.png";/>
        <img id="heartsA" src="images/heartsA.png";/>

        <img id="redJoker" src="images/redJoker.png";/>
        <img id="blackJoker" src="images/blackJoker.png";/>

        <img id="redBack" src="images/Back Red.png";/>
        <img id="blueBack" src="images/Back Blue.png";/>
    </div>
    <script>
        const canvas = document.getElementById('shedCanvas');
        const ctx = canvas.getContext('2d');
        
        var suits = ["spades", "diamonds", "clubs", "hearts"];
        var values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]; 
        let gameRunning;
        let swapping;
        let p1 = false;
        let p2 = false;
        let swappable = false;  // -able variables to enable buttons
        let readyable = true;
        let playable = false;
        let forfeitable = false;
        let replayable = false;
        let deck = [];
        let downcard1 = [];
        let downcard2 = []; 
        let upcard1 = [];
        let upcard2 = [];
        let handcard1 = [];
        let handcard2 = [];
        let selected = []; // List of selected cards
        let stack = []; // Stack of cards in center
        let msg1 = "";
        let msg2 = "";
        
        canvas.addEventListener("click",selectCards);   

        function initGame() {
            gameRunning = true;     
            swapping = true;
            p1 = true;
            createDeck(deck);
            values.push("Joker"); // Facilitates sorting cards in hand
            deal();                   
            draw();         
            sortHand();              
            renderCards();
        }               

        function createDeck(deck) {
            // Iterates through suits and values to create cards
            for (let i = 0; i<suits.length; i++) {
                for (let j = 0; j<values.length; j++) {
                    deck.push({Value: values[j], Suit: suits[i], Magical: false, x1: 0, x2: 0, y1: 0, y2: 0, Selected: false})
                }
            }           
            // Defines magical cards
            for (let i = 0; i<deck.length; i++) {
                switch(deck[i].Value) {
                    case "2":
                    case "7":
                    case "8":
                    case "10":
                        deck[i].Magical = true
                        break;
                }
            }
            // Adds Jokers
            deck.push({Value: "Joker", Suit: "red", Magical: true, x1: 0, x2: 0, y1: 0, y2: 0, Selected: false})
            deck.push({Value: "Joker", Suit: "black", Magical: true, x1: 0, x2: 0, y1: 0, y2: 0, Selected: false})
            // Shuffles       
            for (let i = 0; i<1000; i++) {
                let positionA = Math.floor(Math.random()*deck.length)
                let positionB = Math.floor(Math.random()*deck.length)
                let mid = deck[positionA]
                        
                deck[positionA] = deck[positionB]
                deck[positionB] = mid
            }
        }

        function deal() {
            // 3 downcards and 3 upcards to each player
            while (downcard1.length<3) {
                downcard1.push(deck.pop())
            }
            while (downcard2.length<3) {
                downcard2.push(deck.pop())
            }
            while (upcard1.length<3) {
                upcard1.push(deck.pop())
            }   
            while (upcard2.length<3) {
                upcard2.push(deck.pop())
            }
        }

        function draw() {
            // Draws until 3 cards in hand, as long as there's cards in the deck
            if (deck.length == 0) {
                return
            }
            while (handcard1.length<3) {
                handcard1.push(deck.pop())
            }                                   

            while (handcard2.length<3) {
                handcard2.push(deck.pop())
            }
        }

        function formString(card) {
            // Uses a card's suit and value to form a string to facilitate calling an image via ID
            let string = ''
            return string += card.Suit + card.Value
        }
                
        function renderCards() {
            // Draws the cards and buttons onto the canvas
            for (let i = 0; i<downcard1.length; i++) {
                let x = i*120 + 240
                downcard1[i].x1 = x
                downcard1[i].x2 = x + 80
                downcard1[i].y1 = 510
                downcard1[i].y2 = 630
                ctx.drawImage(document.getElementById("redBack"), x, 510, 80, 120)
                if (downcard1[i].Selected == true) {
                    ctx.lineWidth = "5"
                    ctx.lineJoin = "round"
                    ctx.strokeStyle = "gold"
                    ctx.strokeRect(downcard1[i].x1+2, downcard1[i].y1+2, 76, 115)
                }
            }     
                
            for (let i = 0; i<downcard2.length; i++) {
                let x = i*120 + 240
                ctx.drawImage(document.getElementById("blueBack"), x, 170, 80, 120)
            }       

            for (let i = 0; i<upcard1.length; i++) {
                let s = formString(upcard1[i])
                let x = i*120 + 240
                upcard1[i].x1 = x
                upcard1[i].x2 = x + 80
                upcard1[i].y1 = 505
                upcard1[i].y2 = 625
                ctx.drawImage(document.getElementById(s), x, 505, 80, 120)
                if (upcard1[i].Selected == true) {
                    ctx.lineWidth = "5"
                    ctx.lineJoin = "round"
                    ctx.strokeStyle = "gold"
                    ctx.strokeRect(upcard1[i].x1+2, upcard1[i].y1+2, 76, 115)
                }
            }    

            for (let i = 0; i<upcard2.length; i++) {
                let s = formString(upcard2[i])
                let x = i*120 + 240
                ctx.drawImage(document.getElementById(s), x, 165, 80, 120)
            }           

            for (let i = 0; i<handcard1.length; i++) {
                let s = formString(handcard1[i])
                let gap = ((400-(80*handcard1.length))/(handcard1.length + 1))
                let interval = 80 + gap
                let initial = 200 + gap
                let x = i*interval + initial
                handcard1[i].x1 = x
                handcard1[i].x2 = x + 80
                if (i > 0) {
                    if (handcard1[i-1].x2 > x) {
                        handcard1[i-1].x2 = x-3
                    }
                } 
                handcard1[i].y1 = 680
                handcard1[i].y2 = 800
                ctx.drawImage(document.getElementById(s), x, 680, 80, 120)
                if (handcard1[i].Selected == true) {
                    ctx.lineWidth = "5"
                    ctx.lineJoin = "round"
                    ctx.strokeStyle = "gold"
                    ctx.strokeRect(handcard1[i].x1+2, handcard1[i].y1+2, 76, 115)
                }
            }           

            for (let i = 0; i<handcard2.length; i++) { 
                let gap = ((400-(80*handcard2.length))/(handcard2.length + 1))  
                let interval = 80 + gap
                let initial = 200 + gap     
                let x = i*interval + initial    
                let s = formString(handcard2[i])
                ctx.drawImage(document.getElementById(s), x, 0, 80, 120)
            }

            for (let i = 0; i<deck.length; i++) {
                let y = 340 - i/2;                                                            
                ctx.drawImage(document.getElementById("redBack"), 300, y, 80, 120);
                //Draws cards in deck side by side for testing purposes
                //let y = i%6 * 120
                //let x = Math.floor(i/6) * 20
                //ctx.drawImage(document.getElementById("redBack"), x, y, 80, 120);
            }
                        
            for (let i = 0; i<stack.length; i++) { 
                let s = formString(stack[i])
                let y = 340 - i/4;
                ctx.drawImage(document.getElementById(s), 420, y, 80, 120);
            }

            if (gameRunning == true && swapping == true) {
                readyable = true
                drawReadyButton()
            } else {
                readyable = false
            }


            if (gameRunning == true && swapping == true && selected.length == 2) {
                swappable = true
                drawSwapButton()
            } else {
                swappable = false
            }

            if (gameRunning == true && swapping == false && selected.length>0) {
                playable = true
                drawPlayButton()
            }   else {
                playable = false
            }

            if (gameRunning == true && swapping == false && stack.length>0) {
                forfeitable = true
                drawForfeitButton()
            }   else {
                forfeitable = false
            }

        }          

        function selectCards() {  
            // Handles all clicking, key function for the game loop
            if (gameRunning == true) {
                // Initial swap phase
                if (swapping == true && selected.length<=2) {
                    for (let i = 0; i<upcard1.length; i++) {
                        if (event.offsetX > upcard1[i].x1 && event.offsetX < upcard1[i].x2
                            && event.offsetY > upcard1[i].y1 && event.offsetY < upcard1[i].y2) {
                                if (upcard1[i].Selected == false &&     
                                upcard1.filter((card) => card.Selected == true).length == 0) {
                                    upcard1[i].Selected = true
                                    selected.push(upcard1[i])
                                } else if (upcard1[i].Selected == true) {
                                    selected = selected.filter((card) => card != upcard1[i])
                                    upcard1[i].Selected = false
                                }   
                                    
                        } 
                    }   
                    for (let i = 0; i<handcard1.length; i++) {
                        if (event.offsetX > handcard1[i].x1 && event.offsetX < handcard1[i].x2
                            && event.offsetY > handcard1[i].y1 && event.offsetY < handcard1[i].y2) {
                                if (handcard1[i].Selected == false && 
                                handcard1.filter((card) => card.Selected == true).length == 0) {
                                    handcard1[i].Selected = true
                                    selected.push(handcard1[i]) 
                                } else if (handcard1[i].Selected == true) {
                                    selected = selected.filter((card) => card != handcard1[i])
                                    handcard1[i].Selected = false
                                }
                        } 
                    }
                    // Swap button
                    if (swappable == true) {
                        if (event.offsetX > 60 && event.offsetX < 180
                        && event.offsetY > 530 && event.offsetY < 610) {
                            swapCards()
                        }
                    }
                    // Ready button
                    if (readyable == true) {
                        if (event.offsetX > 620 && event.offsetX < 740
                        && event.offsetY > 530 && event.offsetY < 610) {
                            for (let i = 0; i<upcard1.length;i++) {
                                upcard1[i].Selected = false
                            }
                            for (let i = 0; i<handcard1.length;i++) {
                                handcard1[i].Selected = false
                            }
                            cleanse()
                            swapping = false
                        }   
                    }
                }   
                // Main game phase
                if (swapping == false) {
                    // When handcards are present
                    if (handcard1.length>0) {
                        for (let i = 0; i<handcard1.length; i++) {
                            if (event.offsetX > handcard1[i].x1 && event.offsetX < handcard1[i].x2
                                && event.offsetY > handcard1[i].y1 && event.offsetY < handcard1[i].y2) {
                                    if (handcard1[i].Selected == false) {    
                                        if (selected.length>0) {
                                            if (handcard1[i].Value == selected[0].Value) {
                                                handcard1[i].Selected = true
                                                selected.push(handcard1[i])
                                            }   
                                        }
                                        if (selected.length == 0) {
                                            handcard1[i].Selected = true
                                            selected.push(handcard1[i])
                                        }
                                    } else if (handcard1[i].Selected == true) {
                                        selected = selected.filter((card) => card != handcard1[i])
                                        handcard1[i].Selected = false
                                    }
                            } 
                        }     
                    }
                    // When the player is playing from upcards
                    if (handcard1.length == 0 && upcard1.length>0) {
                        for (let i = 0; i<upcard1.length; i++) {
                            if (event.offsetX > upcard1[i].x1 && event.offsetX < upcard1[i].x2
                                && event.offsetY > upcard1[i].y1 && event.offsetY < upcard1[i].y2) {
                                    if (upcard1[i].Selected == false) {    
                                        if (selected.length>0) {
                                            if (upcard1[i].Value == selected[0].Value) {
                                                upcard1[i].Selected = true
                                                selected.push(upcard1[i])
                                            }
                                        }
                                        if (selected.length == 0) {
                                            upcard1[i].Selected = true
                                            selected.push(upcard1[i])
                                        }
                                    } else if (upcard1[i].Selected == true) {
                                        selected = selected.filter((card) => card != upcard1[i])
                                        upcard1[i].Selected = false
                                    }
                            } 
                        }   
                    }
                    // When the player is using downcards
                    if (handcard1.length == 0 && upcard1.length == 0 && downcard1.length>0) {
                        for (let i = 0; i<downcard1.length; i++) {
                            if (event.offsetX > downcard1[i].x1 && event.offsetX < downcard1[i].x2
                                && event.offsetY > downcard1[i].y1 && event.offsetY < downcard1[i].y2) {
                                    if (downcard1[i].Selected == false) {
                                        if (selected.length == 0) {
                                            downcard1[i].Selected = true
                                            selected.push(downcard1[i])
                                        }
                                    } else if (downcard1[i].Selected == true) {
                                        selected = selected.filter((card) => card != downcard1[i])
                                        downcard1[i].Selected = false
                                    }
                            } 
                        }   
                    }
                    // Play button
                    if (playable == true) {
                        if (event.offsetX > 620 && event.offsetX < 740
                        && event.offsetY > 530 && event.offsetY < 610) {
                            playCards(1)
                            botMove()
                        }   
                    }
                    // Forfeit button
                    if (forfeitable == true) {
                        if (event.offsetX > 60 && event.offsetX < 180
                        && event.offsetY > 530 && event.offsetY < 610) {
                            forfeit(1)
                        }
                    }
                }
            } else if (gameRunning == false) {
                if (replayable == true) {
                    if (event.offsetX > 340 && event.offsetX < 460
                    && event.offsetY > 420 && event.offsetY < 500) {
                        clear()
                        p1 = false;
                        p2 = false;
                        swappable = false;  // -able variables to enable buttons
                        readyable = true;
                        playable = false;
                        forfeitable = false;
                        replayable = false;
                        deck = [];
                        downcard1 = [];
                        downcard2 = []; 
                        upcard1 = [];
                        upcard2 = [];
                        handcard1 = [];
                        handcard2 = [];
                        selected = []; // List of selected cards
                        stack = []; // Stack of cards in center
                        msg1 = "";
                        msg2 = "";
                        initGame()
                    }
                }
            }
            clear();
            draw();
            sortHand();
            if (msg1 != "") {
               drawMessage(msg1,"left",1); 
            }
            if (msg2 != "") {
               drawMessage(msg2,"right",2); 
            }           
            renderCards();
            checkVictory();
        }                   

        function sortHand() {
            // Sorts hands via values array
            handcard1.sort((a,b) => values.findIndex((x) => x == a.Value) - values.findIndex((x) => x == b.Value))
            handcard2.sort((a,b) => values.findIndex((x) => x == a.Value) - values.findIndex((x) => x == b.Value))
        }
        
        function clear() {
            // Clears canvas before rendering
            ctx.clearRect(0,0,800,800)
        }

        function swapCards() {
            // Swaps cards during swap phase
            if(selected.length == 2) {
                let hand = selected.filter((x) => handcard1.includes(x)).pop()
                let up = selected.filter((x) => upcard1.includes(x)).pop()
                cleanse()
                hand.Selected = false   
                up.Selected = false
                handcard1.push(up)
                upcard1.push(hand)
            }       
        }

        function cleanse() {
            // Removes selected cards from player's cards and empties selected array
            handcard1 = handcard1.filter((card) => card.Selected != true)
            upcard1 = upcard1.filter((card) => card.Selected != true)
            downcard1 = downcard1.filter((card) => card.Selected != true)
            handcard2 = handcard2.filter((card) => card.Selected != true)
            upcard2 = upcard2.filter((card) => card.Selected != true)
            downcard2 = downcard2.filter((card) => card.Selected != true)
            selected = []
        }

        function drawSwapButton() {
            // Renders on left side
            ctx.fillStyle = "#ff2b2b"
            ctx.roundRect(60, 530, 120, 80, 5)                                               
            ctx.fill()
            ctx.strokeStyle = "black"
            ctx.lineWidth = 5
            ctx.lineJoin = "round"
            ctx.strokeRect(60, 530, 120, 80)
            ctx.beginPath();
            ctx.moveTo(60,570);
            ctx.lineTo(180,570);
            ctx.closePath();
            ctx.textBaseline = "middle"
            ctx.beginPath();
            ctx.moveTo(120,530);
            ctx.lineTo(120,610);
            ctx.closePath();
            ctx.textAlign = "center"
            ctx.fillStyle ="black"
            ctx.font = "bold 30px Times New Roman"
            ctx.fillText("Swap", 120, 570)    
        }

        function drawReadyButton() {
            // Renders on right side    
            ctx.fillStyle = "#ff2b2b"
            ctx.roundRect(620, 530, 120, 80, 5)                                               
            ctx.fill()
            ctx.strokeStyle = "black"
            ctx.lineWidth = 5
            ctx.lineJoin = "round"
            ctx.strokeRect(620, 530, 120, 80)
            ctx.beginPath();
            ctx.moveTo(620,570);
            ctx.lineTo(740,570);
            ctx.closePath();
            ctx.textBaseline = "middle"
            ctx.beginPath();
            ctx.moveTo(680,530);
            ctx.lineTo(680,610);
            ctx.closePath();
            ctx.textAlign = "center"
            ctx.fillStyle ="black"  
            ctx.font = "bold 30px Times New Roman"
            ctx.fillText("Ready", 680, 570)
        }

        function drawPlayButton() {
            // Renders on right side
            ctx.fillStyle = "#ff2b2b"
            ctx.roundRect(620, 530, 120, 80, 5)                                               
            ctx.fill()
            ctx.strokeStyle = "black"
            ctx.lineWidth = 5
            ctx.lineJoin = "round"
            ctx.strokeRect(620, 530, 120, 80)
            ctx.beginPath();
            ctx.moveTo(620,570);
            ctx.lineTo(740,570);
            ctx.closePath();
            ctx.textBaseline = "middle"
            ctx.beginPath();
            ctx.moveTo(680,530);
            ctx.lineTo(680,610);
            ctx.closePath();
            ctx.textAlign = "center"
            ctx.fillStyle ="black"  
            ctx.font = "bold 30px Times New Roman"
            ctx.fillText("Play", 680, 570)
        }

        function drawForfeitButton() {
            // Renders on left side
            ctx.fillStyle = "#ff2b2b"
            ctx.roundRect(60, 530, 120, 80, 5)                                               
            ctx.fill()
            ctx.strokeStyle = "black"
            ctx.lineWidth = 5
            ctx.lineJoin = "round"
            ctx.strokeRect(60, 530, 120, 80)
            ctx.beginPath();
            ctx.moveTo(60,570);
            ctx.lineTo(180,570);
            ctx.closePath();
            ctx.textBaseline = "middle"
            ctx.beginPath();
            ctx.moveTo(120,530);
            ctx.lineTo(120,610);
            ctx.closePath();
            ctx.textAlign = "center"
            ctx.fillStyle ="black"
            ctx.font = "bold 30px Times New Roman"
            ctx.fillText("Forfeit", 120, 570)    
        }

        function drawReplayButton() {
            ctx.fillStyle = "#ff2b2b"
            ctx.roundRect(340, 420, 120, 80, 5)                                               
            ctx.fill()
            ctx.strokeStyle = "black"
            ctx.lineWidth = 5
            ctx.lineJoin = "round"
            ctx.strokeRect(340, 420, 120, 80)
            ctx.beginPath();
            ctx.moveTo(340,460);
            ctx.lineTo(460,460);
            ctx.closePath();
            ctx.textBaseline = "middle"
            ctx.beginPath();
            ctx.moveTo(400,420);
            ctx.lineTo(400,500);
            ctx.closePath();
            ctx.textAlign = "center"
            ctx.fillStyle ="black"  
            ctx.font = "bold 30px Times New Roman"
            ctx.fillText("Play Again?", 400, 460)
        }

        function transferToStack(x) {
            // The transfers selected cards to stack
            for (let i = 0; i<selected.length;i++) {
                let mid = selected[i]
                stack.push(mid)
            }

            let msgString = ""
            switch(selected.length) {
                case 1:
                    msgString += "one " + (selected[0].Value).toString() + "."
                    break;
                case 2:
                    msgString += "two " + (selected[0].Value).toString() + "s."
                    break;
                case 3:
                    msgString += "three " + (selected[0].Value).toString() + "s."
                    break;
                case 4:
                    msgString += "four " + (selected[0].Value).toString() + "s."
                    break;
            }
            if (x == 1) {
                msg1 = msgString
            } else if (x == 2) [
                msg2 = msgString
            ]

            changeTurn()

            if (stack.at(-1).Value == 10) {
                burn(x)      
            }  
        }

        function compareCards(a,b) {
            // Compares the selected card(s), a, with the card in the stack, b
            if (b.Value == "Joker") {
                if (a.Magical == true) {
                    return false    
                } else if (a.Magical == false) {
                    if (stack.findLastIndex((x) => x.Value != "Joker") != -1) {
                        return compareCards(a,stack.at(stack.findLastIndex((x) => x.Value != "Joker")))
                    } else if (stack.findLastIndex((x) => x.Value != "Joker") == -1) {
                        return true 
                    }
                }                   
            } else if (b.Value == "8") {
                let index = stack.findLastIndex((x) => x.Value != "8")
                if (index != -1) {  
                    return compareCards(a,stack.at(index))
                } else if (index == -1) {
                    return true 
                }           
            } else if (b.Value == "7") {                
                if (a.Magical == true || a.Value < 7) {
                    return true
                } else {
                    return false
                }           
            } else {
                if (a.Magical == true ||
                values.findIndex((x) => x == a.Value) - values.findIndex((x) => x == b.Value) >= 0) {
                    return true
                } else {
                    return false
                }
            }
        }           

        function playCards(x) {
            if (stack.length > 0) {
                if (compareCards(selected[0],stack.at(-1))) {
                    transferToStack(x)
                } else {
                    forfeit(x)
                }
            } else {
                transferToStack(x)
            }
            cleanse()
            checkFourInRow(x)
        }

        function forfeit(x) {
            // Transfers cards from stack to hand
            if (x == 1) {
                handcard1 = handcard1.concat(stack)
                stack = []
                msg1 = "picked up the stack!"
                for (let i = 0; i<handcard1.length;i++) {
                    handcard1[i].Selected = false
                }
            } else if (x == 2) {
                handcard2 = handcard2.concat(stack)
                stack = []
                msg2 = "picked up the stack!"
                for (let i = 0; i<handcard2.length;i++) {
                    handcard2[i].Selected = false
                }
            }   
            changeTurn()
        }                   

        function burn(x) {       
            stack = []
            if (x == 1) {
                msg1 = "burned the stack!"
            } else if (x == 2) [
                msg2 = "burned the stack!"
            ]
            changeTurn()
        }

        function checkVictory() {
            if (downcard1.length == 0 && upcard1.length == 0 && handcard1.length == 0) {
                gameRunning = false
                replayable = true
                clear()
                ctx.font = "bold italics 100px Times New Roman"
                ctx.fillText("You Win!", 400, 300)
                drawReplayButton()
            }

            if (downcard2.length == 0 && upcard2.length == 0 && handcard2.length == 0) {
                gameRunning = false
                replayable = true
                clear()     
                ctx.font = "bold italics 100px Times New Roman"
                ctx.fillText("You Lose!", 400, 400)
                drawReplayButton()
            }
        }   

        function checkFourInRow(x) {
            // Burns if there's 4 cards in a row on the stack of the same value
            if (stack.length >= 4) {
                if (stack.at(-4).Value == stack.at(-3).Value && 
                stack.at(-3).Value == stack.at(-2).Value &&
                stack.at(-2).Value == stack.at(-1).Value) {
                    burn(x)
                }
            }
        }

        function botMove() {
            if (stack.length == 0) {
                // Selects all cards with the same value as the lowest value card
                if (handcard2.length > 0) {
                    for (let i = 0; i<handcard2.length; i++) {
                        if (handcard2[i].Value == handcard2[0].Value) {
                            handcard2[i].Selected = true
                            selected.push(handcard2[i])
                        }
                    }
                } else if (upcard2.length > 0 && handcard2.length == 0) {
                    for (let i = 0; i<upcard2.length; i++) {
                        if (upcard2[i].Value == upcard2[0].Value) {
                            upcard2[i].Selected = true
                            selected.push(upcard2[i])
                        }
                    }
                } else if (upcard2.length == 0 && handcard2.length == 0) {
                    downcard2[0].Selected = true
                    selected.push(downcard2[0])
                }
            } else if (stack.length > 0) {
                // Searches for a valid card to play, forfeits if none found
                // Plays all copies of the same value card if valid card available
                if (handcard2.length > 0) {
                    let chosen = handcard2.findIndex((x) => compareCards(x,stack.at(-1)) == true)
                    if (chosen == -1) {
                        return forfeit(2)
                    } else if (chosen != -1) {
                        let chosenVal = handcard2.at(chosen).Value
                        for (let i = 0; i<handcard2.length; i++) {
                            if (handcard2[i].Value == chosenVal) {
                                handcard2[i].Selected = true
                                selected.push(handcard2[i])
                            }
                        }
                    }
                } else if (upcard2.length > 0 && handcard2.length == 0) {
                    let chosen = upcard2.findIndex((x) => compareCards(x,stack.at(-1)) == true)
                    if (chosen == -1) {
                        return forfeit(2)
                    } else if (chosen != -1) {
                        let chosenVal = upcard2.at(chosen).Value
                        for (let i = 0; i<upcard2.length; i++) {
                            if (upcard2[i].Value == chosenVal) {
                                upcard2[i].Selected = true
                                selected.push(upcard2[i])
                            }
                        }
                    }
                } else if (upcard2.length == 0 && handcard2.length == 0) {
                    downcard2[0].Selected = true
                    selected.push(downcard2[0])
                }
            }
            playCards(2);
        }

        function drawMessage(message,pos,player) {
            let x = pos == "left" ? 75 : 575
            let y = 350;

            ctx.fillStyle = "#FDFD96"
            ctx.roundRect(x, y, 150, 100, 5)                                               
            ctx.fill()

            ctx.strokeStyle = "black"
            ctx.lineWidth = 5
            ctx.lineJoin = "round"
            ctx.strokeRect(x, y, 150, 100)

            ctx.beginPath();
            ctx.moveTo(x+75,350);
            ctx.lineTo(x+75,450);
            ctx.closePath();
            ctx.textAlign = "center"

            ctx.beginPath();
            ctx.moveTo(x,400);
            ctx.lineTo(x+150,400);
            ctx.closePath();
            ctx.textBaseline = "bottom"

            ctx.fillStyle ="black"
            ctx.font = "16px Times New Roman"
            if (player == 1) {
                ctx.fillText("Player 1", x+75, 400)
            } else if (player == 2) {
                ctx.fillText("Player 2", x+75, 400)
            }

            ctx.textBaseline = "top"
            ctx.fillText(message, x+75, 400)  
        }

        function changeTurn() {
            // Swaps over the turns
            if (p1 == true && p2 == false) {
                p1 = false
                p2 = true
            } else if (p1 == false && p2 == true) {
                p1 = true
                p2 = false
            }
        }

    </script>
</body>
</html>