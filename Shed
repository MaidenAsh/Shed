<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shed</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-image: url(images/bg2.jpg);
        }
        #shedCanvas {
            border: 1px solid black;
            border-radius: 15px;
            background-image: url(images/bg.jpg);
            background-size: 800px 800px;
        }
    </style>
</head>
<body onload="initGame()">
    <canvas id="shedCanvas" width="800" height="800"></canvas>
    <!--Every card image is inside this div-->
    <div style="display:none;">
        <img id="spades2" src="images/spades2.png";/>
        <img id="spades3" src="images/spades3.png";/>
        <img id="spades4" src="images/spades4.png";/>
        <img id="spades5" src="images/spades5.png";/>
        <img id="spades6" src="images/spades6.png";/>
        <img id="spades7" src="images/spades7.png";/>
        <img id="spades8" src="images/spades8.png";/>
        <img id="spades9" src="images/spades9.png";/>
        <img id="spades10" src="images/spades10.png";/>
        <img id="spadesJ" src="images/spadesJ.png";/>
        <img id="spadesQ" src="images/spadesQ.png";/>
        <img id="spadesK" src="images/spadesK.png";/>
        <img id="spadesA" src="images/spadesA.png";/>
        
        <img id="clubs2" src="images/clubs2.png";/>
        <img id="clubs3" src="images/clubs3.png";/>
        <img id="clubs4" src="images/clubs4.png";/>
        <img id="clubs5" src="images/clubs5.png";/>
        <img id="clubs6" src="images/clubs6.png";/>
        <img id="clubs7" src="images/clubs7.png";/>
        <img id="clubs8" src="images/clubs8.png";/>
        <img id="clubs9" src="images/clubs9.png";/>
        <img id="clubs10" src="images/clubs10.png";/>
        <img id="clubsJ" src="images/clubsJ.png";/>
        <img id="clubsQ" src="images/clubsQ.png";/>
        <img id="clubsK" src="images/clubsK.png";/>
        <img id="clubsA" src="images/clubsA.png";/>

        <img id="diamonds2" src="images/diamonds2.png";/>
        <img id="diamonds3" src="images/diamonds3.png";/>
        <img id="diamonds4" src="images/diamonds4.png";/>
        <img id="diamonds5" src="images/diamonds5.png";/>
        <img id="diamonds6" src="images/diamonds6.png";/>
        <img id="diamonds7" src="images/diamonds7.png";/>
        <img id="diamonds8" src="images/diamonds8.png";/>
        <img id="diamonds9" src="images/diamonds9.png";/>
        <img id="diamonds10" src="images/diamonds10.png";/>
        <img id="diamondsJ" src="images/diamondsJ.png";/>
        <img id="diamondsQ" src="images/diamondsQ.png";/>
        <img id="diamondsK" src="images/diamondsK.png";/>
        <img id="diamondsA" src="images/diamondsA.png";/>

        <img id="hearts2" src="images/hearts2.png";/>
        <img id="hearts3" src="images/hearts3.png";/>
        <img id="hearts4" src="images/hearts4.png";/>
        <img id="hearts5" src="images/hearts5.png";/>
        <img id="hearts6" src="images/hearts6.png";/>
        <img id="hearts7" src="images/hearts7.png";/>
        <img id="hearts8" src="images/hearts8.png";/>
        <img id="hearts9" src="images/hearts9.png";/>
        <img id="hearts10" src="images/hearts10.png";/>
        <img id="heartsJ" src="images/heartsJ.png";/>
        <img id="heartsQ" src="images/heartsQ.png";/>
        <img id="heartsK" src="images/heartsK.png";/>
        <img id="heartsA" src="images/heartsA.png";/>

        <img id="redJoker" src="images/redJoker.png";/>
        <img id="blackJoker" src="images/blackJoker.png";/>

        <img id="redBack" src="images/Back Red.png";/>
        <img id="blueBack" src="images/Back Blue.png";/>
    </div>
    <script>
        const canvas = document.getElementById('shedCanvas');
        const ctx = canvas.getContext('2d');
        
        var suits = ["spades", "diamonds", "clubs", "hearts"];
        var values = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"]; 
        let gameRunning;
        let swapping;
        let downcard1 = [];
        let downcard2 = []; 
        let upcard1 = [];
        let upcard2 = [];
        let handcard1 = [];
        let handcard2 = [];
        let selected = []; 
        let stack = []; // Stack of cards in center

        canvas.addEventListener("click",selectCards);

        function initGame() {
            gameRunning = true;
            swapping = true
            let deck = createDeck();
            deal(deck);
            draw(deck);
            renderCards(deck);
            ctx.drawImage(document.getElementById("redBack"), 0, 0, 80, 120);
        }

        function gameLoop() {
            draw(deck);
            renderCards(deck);
        }           

        function createDeck() {
            let deck = []
            // Iterates through suits and values to create cards
            for (let i = 0; i<suits.length; i++) {
                for (let j = 0; j<values.length; j++) {
                    deck.push({Value: values[j], Suit: suits[i], Magical: false, x1: 0, x2: 0, y1: 0, y2: 0, Selected: false})
                }
            }
            // Defines magical cards
            for (let i = 0; i<deck.length; i++) {
                switch(deck[i].Value) {
                    case "2":
                    case "7":
                    case "8":
                    case "10":
                        deck[i].Magical = true
                        break;
                }
            }
            // Adds jokers
            deck.push({Value: "Joker", Suit: "red", Magical: true, x1: 0, x2: 0, y1: 0, y2: 0, Selected: false})
            deck.push({Value: "Joker", Suit: "black", Magical: true, x1: 0, x2: 0, y1: 0, y2: 0, Selected: false})
            // Shuffles       
            for (let i = 0; i<1000; i++) {
                let positionA = Math.floor(Math.random()*deck.length)
                let positionB = Math.floor(Math.random()*deck.length)
                let mid = deck[positionA]
                        
                deck[positionA] = deck[positionB]
                deck[positionB] = mid
            }
            return deck
        }

        function deal(deck) {
            while (downcard1.length<3) {
                downcard1.push(deck.pop())
            }
            while (downcard2.length<3) {
                downcard2.push(deck.pop())
            }
            while (upcard1.length<3) {
                upcard1.push(deck.pop())
            }   
            while (upcard2.length<3) {
                upcard2.push(deck.pop())
            }
        }

        function draw(deck) {
            if (deck.length == 0) {
                return
            }
            while (handcard1.length<3) {
                handcard1.push(deck.pop())
            }
            while (handcard2.length<3) {
                handcard2.push(deck.pop())
            }
        }

        function formString(card) {
            let string = ''
            return string += card.Suit + card.Value
        }
                
        function renderCards(deck) {
            for (let i = 0; i<downcard1.length; i++) {
                let x = i*120 + 240
                downcard1[i].x1 = x
                downcard1[i].x2 = x + 80
                downcard1[i].y1 = 510
                downcard1[i].y2 = 630
                ctx.drawImage(document.getElementById("redBack"), x, 510, 80, 120)
            }     
                
            for (let i = 0; i<downcard2.length; i++) {
                let x = i*120 + 240
                ctx.drawImage(document.getElementById("blueBack"), x, 170, 80, 120)
            }    
            
            for (let i = 0; i<upcard1.length; i++) {
                let s = formString(upcard1[i])
                let x = i*120 + 240
                upcard1[i].x1 = x
                upcard1[i].x2 = x + 80
                upcard1[i].y1 = 505
                upcard1[i].y2 = 625
                ctx.drawImage(document.getElementById(s), x, 505, 80, 120)
            }    

            for (let i = 0; i<upcard2.length; i++) {
                let s = formString(upcard2[i])
                let x = i*120 + 240
                ctx.drawImage(document.getElementById(s), x, 165, 80, 120)
            } 

            for (let i = 0; i<handcard1.length; i++) {
                let s = formString(handcard1[i])
                let gap = ((400-(80*handcard1.length))/(handcard1.length + 1))
                let interval = 80 + gap
                let initial = 200 + gap
                let x = i*interval + initial
                handcard1[i].x1 = x
                handcard1[i].x2 = x + 80
                if (i > 0) {
                    if (handcard1[i-1].x2 > x) {
                        handcard1[i-1].x2 = x-3
                    }
                } 
                handcard1[i].y1 = 680
                handcard1[i].y2 = 800
                ctx.drawImage(document.getElementById(s), x, 680, 80, 120)
            } 

            for (let i = 0; i<handcard2.length; i++) { 
                let gap = ((400-(80*handcard2.length))/(handcard2.length + 1))
                let interval = 80 + gap
                let initial = 200 + gap
                let x = i*interval + initial
                ctx.drawImage(document.getElementById("blueBack"), x, 0, 80, 120)
            }
            
            for (let i = 0; i<deck.length; i++) { 
                let y = 340 - i/4;
                ctx.drawImage(document.getElementById("redBack"), 300, y, 80, 120);
            }
                        
            for (let i = 0; i<stack.length; i++) { 
                let s = formString(stack[i])
                let y = 340 - i/4;
                ctx.drawImage(document.getElementById(s), 420, y, 80, 120);
            }
        }          

        function selectCards() {    
            if (gameRunning == true) {
                // Initial swap phase
                if (swapping == true && selected.length<2) {
                    for (let i = 0; i<upcard1.length; i++) {
                        if (event.offsetX > upcard1[i].x1 && event.offsetX < upcard1[i].x2
                            && event.offsetY > upcard1[i].y1 && event.offsetY < upcard1[i].y2) {
                                if (upcard1[i].Selected == false && 
                                upcard1.filter((card) => card.Selected == true).length == 0) {
                                    upcard1[i].Selected == true
                                    selected.push(upcard1[i])
                                } else if (upcard1[i].Selected == true) {
                                    selected = selected.filter((card) => card != upcard1[i])
                                    upcard1[i].Selected == false
                                }
                                    
                        } 
                    }   
                    for (let i = 0; i<handcard1.length; i++) {
                        if (event.offsetX > handcard1[i].x1 && event.offsetX < handcard1[i].x2
                            && event.offsetY > handcard1[i].y1 && event.offsetY < handcard1[i].y2) {
                                if (handcard1[i].Selected == false && 
                                handcard1.filter((card) => card.Selected == true).length == 0) {
                                    handcard1[i].Selected == true
                                    selected.push(handcard1[i])
                                } else if (handcard1[i].Selected == true) {
                                    selected = selected.filter((card) => card != handcard1[i])
                                    handcard1[i].Selected == false
                                }
                        } 
                    }     
                }
                // Main game phase
                if (swapping == false) {
                    // When handcards are present
                    if (handcard1.length>0) {
                        for (let i = 0; i<handcard1.length; i++) {
                            if (event.offsetX > handcard1[i].x1 && event.offsetX < handcard1[i].x2
                                && event.offsetY > handcard1[i].y1 && event.offsetY < handcard1[i].y2) {
                                    if (handcard1[i].Selected == false) {    
                                        if (selected.length>1) {
                                            if (handcard1[i].Value == selected[0].Value) {
                                                handcard1[i].Selected == true
                                                selected.push(handcard1[i])
                                            }
                                        }
                                        if (selected.length == 0) {
                                            handcard1[i].Selected == true
                                            selected.push(handcard1[i])
                                        }
                                    } else if (handcard1[i].Selected == true) {
                                        selected = selected.filter((card) => card != handcard1[i])
                                        handcard1[i].Selected == false
                                    }
                            } 
                        }     
                    }
                    // When the player is playing from upcards
                    if (handcard1.length == 0 && upcard1.length>0) {
                        for (let i = 0; i<upcard1.length; i++) {
                            if (event.offsetX > upcard1[i].x1 && event.offsetX < upcard1[i].x2
                                && event.offsetY > upcard1[i].y1 && event.offsetY < upcard1[i].y2) {
                                    if (upcard1[i].Selected == false) {    
                                        if (selected.length>1) {
                                            if (upcard1[i].Value == selected[0].Value) {
                                                upcard1[i].Selected == true
                                                selected.push(upcard1[i])
                                            }
                                        }
                                        if (selected.length == 0) {
                                            upcard1[i].Selected == true
                                            selected.push(upcard1[i])
                                        }
                                    } else if (upcard1[i].Selected == true) {
                                        selected = selected.filter((card) => card != upcard1[i])
                                        upcard1[i].Selected == false
                                    }
                            } 
                        }   
                    }
                    // When the player is using downcards
                    if (handcard1.length == 0 && upcard1.length == 0 && downcard1.length>0) {
                        for (let i = 0; i<downcard1.length; i++) {
                            if (event.offsetX > downcard1[i].x1 && event.offsetX < downcard1[i].x2
                                && event.offsetY > downcard1[i].y1 && event.offsetY < downcard1[i].y2) {
                                    if (downcard1[i].Selected == false) {
                                        if (selected.length == 0) {
                                            downcard1[i].Selected = true
                                            selected.push(downcard1[i])
                                        }
                                    } else if (downcard1[i].Selected == true) {
                                        selected = selected.filter((card) => card != downcard1[i])
                                        downcard1[i].Selected == false
                                    }
                            } 
                        }   
                    }
                }
            }   
        }    
        
        function playCards(selected) {
            // Transfers selected cards to the stack
            for (let i = 0; i<selected.length;i++) {
                stack.push(selected.pop())
            }
            // Removes selected cards from player's cards
            handcard1 = handcard1.filter((card) => card.Selected == false)
            upcard1 = upcard1.filter((card) => card.Selected == false)
            downcard1 = downcard1.filter((card) => card.Selected == false)
        }
        

        initGame();
    </script>
</body>
</html>